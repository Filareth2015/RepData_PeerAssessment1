x1 <- 2
x2 <- 3
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?boxplot()
?subset()
?with()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, blue)
boxplot(ppm, col = blue)
boxplot(pollution$pm25, col = "blue")
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
rug(high)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
plot(east$latitude, east$pm25, main = "East")
windows()
R
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(Wind, Ozone, col = "blue")
points(airquality$Wind, airquality$Ozone, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality)
notmay <- subset(airquality, Month!=5)
points(airquality$Wind, airquality$Ozone, col = "blue")
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(airquality$Wind, lty=2, lwd = 2)
abline(v = median(airquality$Wind), lty=2, lwd = 4)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(1,2)
par(mfrow=c(1,2))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0)))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
?as.factor()
myedit("plot1.R")
p <- xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
print(p)
invisible()
library(lattice)
p <- xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
print(p)
invisible()
seq(0,1,len=6)
rgb(0, 1, 0)
p7 <- colorRamp("red","blue")
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
plot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv, set = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
library(swirl)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(mpg, aes(displ, hwy)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color=drv))
g + geom_point(aes(color=drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color=drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g + geom_line(g)
g + geom_line(0)
g <- ggplot(testdat, aes(myx, myy), geom_line(0))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(, aes(x = displ, y = hwy, color = year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut())
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm")
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(carat, price, data = diamonds, color = cut)
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat, price, data = diamonds)
qplot(price, data = diamonds, shape = cut)
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color = cut)
qplot(carat,price,data=diamonds, color = cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color = cut, geom = c("point", "smooth"), facets = .~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
library(httr)
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
rep(1:9, len = 54)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-"5:20"
-(5:20)
select(cran, -(x:ip_id))
select(cran, x:ip_id)
select(cran, -(X:ip_id))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na(NA))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id
)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size)
)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_counts <- filter(pack_sum, unique > 465)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
library(swirl)
swirl()
cmat
points(cx, cy, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
point(cx, cy, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
points(cmat, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, c(1,12), which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]) * (svd1$d[1]) * (svd1$v[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,2:5] %*% diag(svd1$d[2:5]) %*% t(svd1$v[,2:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[ , 562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, boolean)
sub1 <- subset(ssd, subset = 1)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[ , 1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[ , 1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[ , 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[ , 2])
mdist <- dist(sub1[ 10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[ , -c(562, 563)], centers == 6)
kClust <- kmeans(sub1[ , -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[ , -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
f <- gl(3, 10)
f
setwd("D:/Pasha/Обучение/Data science/05_ReproducibleResearch/Working folder/RepData_PeerAssessment1")
setwd("D:/Pasha/Обучение/Data science/05_ReproducibleResearch/Working folder/RepData_PeerAssessment1")
The data for this report can be found at https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip.
After downloading the data set into a csv file named, "activity.csv", it is read into R to analyze the numbers.
``` {r}
dat <- read.csv("activity.csv")
```
library(knitr)
library(knitr)
knit2html("PA1_template.html")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
cls = c("integer", "character", "integer")
df <- read.csv("activity.csv", head=TRUE, colClasses=cls, na.strings="NA")
head(df)
df$date <- as.Date(df$date)
df_ign <- subset(df, !is.na(df$steps))
dailysum <- tapply(df_ign$steps, df_ign$date, sum, na.rm=TRUE, simplify=T)
dailysum <- dailysum[!is.na(dailysum)]
hist(x=dailysum,
col="red",
breaks=20,
xlab="Daily total steps",
ylab="Frequency",
main="The distribution of daily total (missing data ignored)")
mean(dailysum)
median(dailysum)
int_avg <- tapply(df_ign$steps, df_ign$interval, mean, na.rm=TRUE, simplify=T)
df_ia <- data.frame(interval=as.integer(names(int_avg)), avg=int_avg)
with(df_ia,
plot(interval,
avg,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days"))
max_steps <- max(df_ia$avg)
df_ia[df_ia$avg == max_steps, ]
sum(is.na(df$steps))
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
[1] 2304
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
